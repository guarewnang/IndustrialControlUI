<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        //+f4f//n8f//54P//+AH///wP///w==
</value>
  </data>
</root>